---
title: "HW 02"
author: "Brooke Pacheco"
format: 
  html:
    embed-resources: true
toc: true
execute:
  warning: false
  error: false
  message: false
---

```{r}
#| label: Set-up
# load packages
library(countdown)
library(scales)
library(tidyverse)
library(janitor)
library(colorspace)
library(broom)
library(fs)
library(ggridges)
library(ggplot2)
library(dplyr)
library(here)
library(glue)
library(ggthemes)

# set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 11))

# set width of code output
options(width = 65)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7, # 7" width
  fig.asp = 0.618, # the golden ratio
  fig.retina = 3, # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300 # higher dpi, sharper image
)

# install pacman if needed
if (!require("pacman")) 
  install.packages("pacman")

# use this line for installing/loading
pacman::p_load(
  tidyverse, janitor, colorspace, broom, fs, 
  ggridges, ggplot2, dplyr, countdown, ggthemes, devtools
)

# install dsbox if needed
if (!require("dsbox")) devtools::install_github("databrew/dsbox")

# load dsbox package
library(dsbox)

# global ggplot theme
theme_set(theme_minimal(base_size = 11))
```



## 1 - A new day, a new plot, a new geom



```{r}
#| label: Question 1 - edibnb neighbourhood plot

# load edibnb dataset into environment
data(edibnb)

# Read in data from edinbnb data and clean 
write_csv(edibnb, "edibnb_data.csv", na = "")

edibnb |>
  glimpse()

edibnb |>
  select(neighbourhood, review_scores_rating) |>
  filter(!is.na(review_scores_rating)) |>
  filter(!is.na(neighbourhood)) |>
  group_by(neighbourhood) |>
  mutate(median_score = median(review_scores_rating)) |>
  ungroup() |>
  filter(!is.na(median_score)) |>
  mutate(neighbourhood = fct_reorder(neighbourhood, median_score)) 

data <- data.frame(x = 1:5, y = rep(1, 5), height = c(0, 1, 3, 4, 2))
ggplot(edibnb, aes(x = review_scores_rating, y = neighbourhood)) +
  geom_density_ridges(scale = 4, rel_min_height = 0.01) +
  coord_cartesian(clip = "off") + 
  scale_x_continuous(limits = c(80, 103), expand = c(0, 0)) +
  labs(
    title = "Airbnb Review Scores of Edinburgh Neighborhoods",
    x = "Review Score",
    y = "Neighborhood"
  ) +
  theme_ridges()

```


### Sources
Tools on using the write function directly used from:
https://readr.tidyverse.org/reference/write_delim.html


## 2 - Foreign Connected PACs



```{r}
#| label: Question 2 - political parties plots

# get a list of files with "Foreign Connected PAC" in their names
list_of_files <- dir_ls(path = "data", regexp = "Foreign Connected PAC")

# keeping track of the file name in a new column called year
pac <- read_csv(list_of_files, id = "year") |>
  janitor::clean_names() |>
  mutate(year = stringr::str_extract(year, "\\d{4}"),
         year = as.integer(year)) |>
  separate(country_of_origin_parent_company, 
           into = c("country_of_origin", "parent_company"), 
           sep = "/", 
           fill = "right") |>
  mutate(
    dems = readr::parse_number(dems),
    repubs = readr::parse_number(repubs)
  ) |>
  select(year, pac_name_affiliate, country_of_origin, parent_company, dems, repubs) |>
  pivot_longer(
    cols = c(dems, repubs),
    names_to = "party",
    values_to = "amount"
  ) |>
  mutate(
    party = case_when(
      party == "dems" ~ "Democrat",
      party == "repubs" ~ "Republican",
      TRUE ~ party
    ))

# extract uk data
uk <- pac |>
  filter(country_of_origin %in% c("United Kingdom", "UK")) |>
  group_by(year, party) |>
  summarize(total_amount = sum(amount, na.rm = TRUE), .groups = "drop") |>
  mutate(total_amount = total_amount / 1000000) |>
  mutate(year = year + 1) |>
  arrange(year, party)

# plot - UK contributions to US political parties
ggplot(uk, aes(x = year, y = total_amount, color = party, group = party)) + 
  geom_line(linewidth = 0.8) +
  scale_color_manual(
    values = c("Democrat" = "blue", "Republican" = "red")
  ) +
  labs (
    title = "Contributions to US political parties from UK-connected PACs",
    x = "Year",
    y = "Total amount",
    color = "Party",       
    caption = "Source: OpenSecrets.org" 
  ) +
  scale_x_continuous(breaks = seq(2000, 2020, 5)) +
  scale_y_continuous(labels = label_dollar(suffix = "M")) +
  theme_minimal(base_size = 11) + 
  theme(
    legend.position = c(0.9, 0.15),
    axis.title.x = element_text(hjust = 0),  
    axis.title.y = element_text(hjust = 0)
  )

# extract Germany data
germany <- pac |>
  filter(country_of_origin %in% c("Germany")) |>
  group_by(year, party) |>
  summarize(total_amount = sum(amount, na.rm = TRUE), .groups = "drop") |>
  mutate(total_amount = total_amount / 1000000) |>
  mutate(year = year + 1) |>
  arrange(year, party)

# plot - German contributions to US political parties
ggplot(germany, aes(x = year, y = total_amount, color = party, group = party)) + 
  geom_line(linewidth = 0.8) +
  scale_color_manual(
    values = c("Democrat" = "blue", "Republican" = "red")
  ) +
  labs (
    title = "Contributions to US political parties from Germany-connected PACs",
    x = "Year",
    y = "Total amount",
    color = "Party",       
    caption = "Source: OpenSecrets.org" 
  ) +
  scale_x_continuous(breaks = seq(2000, 2020, 5)) +
  scale_y_continuous(labels = label_dollar(suffix = "M")) +
  theme_minimal(base_size = 11) + 
  theme(
    legend.position = c(0.9, 0.15),
    axis.title.x = element_text(hjust = 0),  
    axis.title.y = element_text(hjust = 0)
  )
```


The plot above shows how much money Germany-connected PACs are contributing to U.S. political parties. Based on both the Germany and UK data, it appears that Republican affiliated PACs receive significantly more funding than Democrat affiliated PACs. That said, both parties receive millions of dollars in contributions from foreign-connected PACs.

### Sources
Usage of string extract inspired by:
https://stringr.tidyverse.org/reference/str_extract.html#ref-examples

Separating character string and using fill arguement inspired by: https://tidyr.tidyverse.org/reference/separate.html 

Taken parse number from to remove '$' from column data:
https://readr.tidyverse.org/reference/parse_number.html

Referenced cheat sheet page for readr:
https://readr.tidyverse.org/

Referenced this page for pivot_longer parameters:
https://tidyr.tidyverse.org/reference/pivot_longer.html


## 3 - Median housing prices in the US


```{r}
#| label: Question 3 - housing and recession plots

# Read in data from median housing file
median_housing <- read_csv(here("data", "median-housing.csv")) |>
  mutate(
    date = DATE,
    price = MSPUS
  ) |>
  select(date, price)

# Read in data from recessions file
recessions <- read_csv(here("data" ,"recessions.csv"))

# create the plot
ggplot(median_housing, aes(x = date, y = price)) + 
  geom_line(linewidth = 0.8, color = "deepskyblue3") +
  scale_x_date(
    breaks = seq(as.Date("1965-01-01"), as.Date("2020-01-01"), by = "5 years"),
    date_labels = "%Y"
  ) +
  scale_y_continuous(
    breaks = seq(0, 400000, 40000), 
    labels = comma,
    limits = c(0, 400000)) +
  labs (
    x = "Year",
    y = "Dollars",
    title = "Median sales price of houses sold in the United States",
    subtitle = "Not seasonally adjusted",
    caption = "Source: Census; HUD" 
  ) +
  theme(
    plot.title.position = "plot",
    panel.grid.minor.x = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.y = element_blank()
  )

# identify recessions
recessions <- recessions |>
  mutate(
    timeframe = case_when(
      (Peak >= min(median_housing$date) & Peak <= max(median_housing$date)) |
      (Trough >= min(median_housing$date) & Trough <= max(median_housing$date)) ~ TRUE,
      TRUE ~ FALSE
    )
  ) |>
  filter(
    Peak <= max(median_housing$date) & Trough >= min(median_housing$date)
  ) 

# create the second plot - adding recession data
ggplot(median_housing, aes(x = date, y = price)) + 
  geom_rect(
    data = recessions,
    aes(xmin = Peak, xmax = Trough, ymin = -Inf, ymax = Inf),
    fill = "lightgray", inherit.aes = FALSE
  ) +
  geom_line(linewidth = 0.8, color = "deepskyblue4") +
  scale_x_date(
    breaks = seq(as.Date("1965-01-01"), as.Date("2020-01-01"), by = "5 years"),
    date_labels = "%Y"
  ) +
  scale_y_continuous(
    breaks = seq(0, 400000, 40000), 
    labels = comma,
    limits = c(0, 400000)) +
  labs (
    x = "Year",
    y = "Dollars",
    title = "Median sales price of houses sold in the United States",
    subtitle = "Not seasonally adjusted",
    caption = "Source: Census; HUD" 
  ) +
  theme(
    plot.title.position = "plot",
    panel.grid.minor.x = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.y = element_blank()
  )

# add year and quarter columns
median_housing_subset <- median_housing |> 
  mutate(
    year = year(date),
    quarter = case_when(
      date >= as.Date("2019-01-01") & date <= as.Date("2019-03-31") ~ "Q1",
      date >= as.Date("2019-04-01") & date <= as.Date("2019-06-30") ~ "Q2",
      date >= as.Date("2019-07-01") & date <= as.Date("2019-09-30") ~ "Q3",
      date >= as.Date("2019-10-01") & date <= as.Date("2019-12-31") ~ "Q4",
      date >= as.Date("2020-01-01") & date <= as.Date("2020-03-31") ~ "Q1",
      date >= as.Date("2020-04-01") & date <= as.Date("2020-06-30") ~ "Q2",
      date >= as.Date("2020-07-01") & date <= as.Date("2020-09-30") ~ "Q3",
      date >= as.Date("2020-10-01") & date <= as.Date("2020-12-31") ~ "Q4",
      TRUE ~ ""
    ),
    year_quarter = paste(year, quarter), 
    year_quarter = factor(
      year_quarter,
      levels = c("2019 Q1", "2019 Q2", "2019 Q3", "2019 Q4","2020 Q1", "2020 Q2", "2020 Q3", "2020 Q4"
      )
    )
  ) |>
  filter(year %in% c("2019", "2020"))



# create the third plot - with year subset and quarter
ggplot(median_housing_subset, aes(x = year_quarter, y = price, group = 1)) +
  geom_point(shape = 1, fill = NA, size = 2, color = "deepskyblue4", show.legend = FALSE) +
  geom_line(linewidth = 0.8, color = "deepskyblue4") +
  scale_y_continuous(
    breaks = seq(300000, 360000, 20000),
    labels = comma
  ) +
  labs (
    x = "Quarters",
    y = "Dollars",
    title = "Median sales price of houses sold in the United States",
    subtitle = "Not seasonally adjusted",
    caption = "Source: Census; HUD"
  ) +
  annotate(
    geom = "text",
    x = c("2019 Q2", "2020 Q2"),
    y = -10000,
    label = c("2019", "2020"),
    size = 4
  ) +
  coord_cartesian(clip = "on", ylim = c(300000, 360000)) +
  theme(
    plot.title.position = "plot",
    panel.border = element_rect(color = "lightgrey", fill = NA, linewidth = 0.5)
  )
```


### Sources
Referenced scale_y_continuous parameters here:
https://ggplot2.tidyverse.org/reference/scale_continuous.html

Referenced for concatenating strings:
https://stat.ethz.ch/R-manual/R-devel/library/base/html/paste.html

Referenced for factor inside data:
https://stat.ethz.ch/R-manual/R-devel/library/base/html/factor.html

Referenced for hollow circles:
https://ggplot2.tidyverse.org/reference/geom_point.html


## 4 - Expect More. Plot More.


```{r}
#| label: Question 4 - target logo plot

# angle vector
angle <- seq(0, 2 * pi, length.out = 1000)

# outer circle coordinates
outer_circle <- tibble(
  x = 2 * cos(angle),
  y = 2 * sin(angle),
  group = "outer"
)

# create inner circle coordinates
inner_circle <- tibble(
  x = 0.4 * cos(angle),
  y = 0.4 * sin(angle),
  group = "innerr"
)

# center point
center <- tibble(
  x = 0,
  y = 0,
  group = "center"
)

# trademark circle
trademark <- tibble(
  x = 0.3 * cos(angle) + 2.5,
  y = 0.3 * sin(angle) - 3.5,
  group = "trademark"
)

# combine both circles
circle <- bind_rows(outer_circle, inner_circle, center)

# Plot the smooth circle
ggplot(circle, aes(x = x, y = y, group = group)) +
  geom_point(aes(x = 0, y = 0), color = "#cc0000") +
  geom_path(linewidth = 10, color = "#cc0000") +
  coord_equal(xlim = c(-4, 4), ylim = c(-4, 4)) +
  annotate("text", x = 0, y = -3, label = "TARGET", color = "#cc0000", size = 10, font = "Helvetica", fontface = "bold") +
  annotate("text", x = 2.5, y = -3.5, label = "R", color = "#cc0000", size = 4, font = "Helvetica", fontface = "bold") +
  geom_path(data = trademark, linewidth = 1, color = "#cc0000") +
  labs(
    title = "Target logo",
    x = "X Coordinates",
    y = "Y Coordinates"
    ) +
  theme(
    plot.title.position = "plot",
    panel.grid.minor.x = element_blank(),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_blank()
  )

```


### Sources
Referenced for combining rows in tibble:
https://dplyr.tidyverse.org/reference/bind_rows.html

Target's font name:
https://www.subframe.com/tips/what-font-does-target-use#:~:text=The%20use%20of%20Helvetica%20Neue,visual%20consistency%20and%20modern%20appeal.

Target's color:
https://www.brandcolorcode.com/target

Referenced to build a sequence and directly taken length.out to generate length of sequence:
https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/seq

## 5 - Mirror, mirror on the wall, who’s the ugliest of them all?


```{r}
#| label: Question 5 - ugly plot

ggplot(penguins, aes(x = bill_len, y = body_mass, color = island)) +
  scale_color_manual(values = c("yellow", "green", "red")) +
  geom_rect(
    xmin = 40, xmax = 60,
    ymin = 2700, ymax = 6000,
    fill = "orange", alpha = 0.3,
    inherit.aes = FALSE
  ) +
  geom_rect(
    xmin = 40, xmax = 60,
    ymin = 2700, ymax = 6000,
    fill = "orange", alpha = 0.3,
    inherit.aes = FALSE
  ) +
  geom_point() +
  facet_grid(. ~ year) +
  theme(
    plot.title.position = "plot",
    panel.grid.minor = element_blank(),
    panel.grid.major = element_blank()
  ) +
  labs(title = "Penguin Data...",
       x = "PenGUIN) data 1 - bill_len",
       y = "PENGUIN Data 2 - body_mass") 
```
